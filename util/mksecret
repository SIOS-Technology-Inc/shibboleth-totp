#!/opt/sios/rbenv/shims/ruby
# -*- coding: UTF-8 -*-

require 'optparse'
require 'openssl'
require 'base32'
require 'base64'

class Cipher
public
  def initialize
    @cipher_algorithm_name = 'AES-256-CBC'
    @pbkdf2_salt_length = 32
    @pbkdf2_iteration_count = 15000

    @cipher = OpenSSL::Cipher::Cipher.new(@cipher_algorithm_name)
  end
  def encrypt(pass, data)
    salt = OpenSSL::Random.random_bytes(@pbkdf2_salt_length)
    cipher = @cipher.encrypt
    hmac = create_hmac(pass, salt, cipher.key_len + cipher.iv_len)
    cipher.key = hmac[0, cipher.key_len]
    cipher.iv = hmac[cipher.key_len, cipher.iv_len]
    result = ''
    ((result << cipher.update(data) << cipher.final) + salt)
  end
  def decrypt(pass, data)
    rawdata = data[0, data.length - @pbkdf2_salt_length]
    salt = data[data.length - @pbkdf2_salt_length, data.length]
    cipher = @cipher.decrypt
    hmac = create_hmac(pass, salt, cipher.key_len + cipher.iv_len)
    cipher.key = hmac[0, cipher.key_len]
    cipher.iv = hmac[cipher.key_len, cipher.iv_len]
    result = ''
    (result << cipher.update(rawdata) << cipher.final)
  end

private
  def create_hmac(pass, salt, length)
    digest = OpenSSL::Digest::SHA1.new()
    OpenSSL::PKCS5.pbkdf2_hmac(pass, salt, @pbkdf2_iteration_count, length, digest)
  end
end

class Secret
public
  def initialize(pass)
    @cipher = Cipher.new
    @passphrase = pass
    @secret_length = 10
  end
  def make
    secret = create_secret(@secret_length)
    Base64.strict_encode64(@cipher.encrypt(@passphrase, secret))
  end
  def test(data)
    @cipher.decrypt(@passphrase, Base64.strict_decode64(data))
  end

private
  def create_secret(length)
    Base32.encode(OpenSSL::Random.random_bytes(length))
  end
end

options = {
  'is_make' => false,
  'is_test' => false,
  'value' => nil,
  'pass'  => 'password'
}
OptionParser.new do |option|
  option.on('-m', '--make', '暗号化済み事前共有鍵を表示する') do |value|
    options['is_make'] = true
  end
  option.on('-t', '--test VALUE', '事前共有鍵を復号化して表示する') do |value|
    options['is_test'] = true
    options['value'] = value
  end
  option.on('-p', '--passphrase VALUE', '暗号化・復号化時のパスフレーズを指定する (default: password)') do |value|
    options['pass'] = value
  end
  option.parse!(ARGV)
end

begin
  if options['is_make'] then
    secret = Secret.new(options['pass'])
    value  = secret.make
    raw_value = Base32.decode(secret.test(value))

    puts  'パスフレーズ: ' + options['pass']
    print '事前共有鍵 (暗号化前データ): { '
    raw_value.bytes.each_with_index do |byte, index|
      printf '0x%02X', byte
      if (index < raw_value.bytes.length - 1) then
        print ', '
      end
    end
    puts  ' }'
    puts  '事前共有鍵 (暗号化前文字列): ' + secret.test(value)
    puts  '事前共有鍵 (暗号化後文字列): ' + value
  elsif options['is_test'] then
    puts Secret.new(options['pass']).test(options['value'])
  end
rescue => e
  puts '[ERROR] %s' % [e]
end
